@startuml

class CMatrice {
  - tavola: char[][]
  - righe: int
  - colonne: int

  + CMatrice(righe: int, colonne: int)
  + getTavola(): char[][]
  + inserisciPezzo(colonna: int, pezzo: char): boolean
  + controllaVittoria(pezzo: char): boolean
  + stampaMatrice(): String
  + getRigaInserimento(colonna: int): int
}

class SharedData {
  - m: CMatrice
  - currentTurn: int
  - threadMap: Map<String, CommunicationThread>

  + SharedData()
  + switchTurn(): void
  + getCurrentTurn(): int
}

class CommunicationThread {
  - clientSocket: Socket
  - port: int
  - sharedData: SharedData

  + CommunicationThread(clientSocket: Socket, port: int, sharedData: SharedData)
  + run(): void
  + sendMessage(message: String): void
}

class TCPServer {
  - sharedData: SharedData
  - clients: List<CommunicationThread>

  + main(args: String[]): void
  + startServer(port: int): void
  + startCommunicationThread(threadName: String, turno: int): void
  + notifyAllClients(message: String): void
  + stopServer(): void
}

class TCPClient {
  - pezzo: char
  - rosso: Color
  - giallo: Color
  - serverPort: int
  - gui: GUI

  + TCPClient(gui: GUI)
  + comunicazioneServer(colonna: int): void
  + main(args: String[]): void
}

GUI --> TCPClient
TCPClient --> GUI
TCPClient --> SwingWorker
TCPServer --> CommunicationThread
CommunicationThread --> Socket
CommunicationThread --> SharedData
CommunicationThread --> IOException

class TCPClient2 {
  - pezzo: char
  - rosso: Color
  - giallo: Color
  - serverPort: int
  - gui: GUI

  + TCPClient2(gui: GUI)
  + comunicazioneServer(colonna: int): void
}

TCPClient2 --> GUI
TCPClient2 --> SwingWorker

@enduml
