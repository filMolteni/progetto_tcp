@startuml

class CMatrice {
  - tavola: char[][]
  - righe: int
  - colonne: int

  + CMatrice(righe: int, colonne: int)
  + getTavola(): char[][]
  + inserisciPezzo(colonna: int, pezzo: char): boolean
  + controllaVittoria(pezzo: char): boolean
  + stampaMatrice(): String
  + getRigaInserimento(colonna: int): int
}

class SharedData {
  - m: CMatrice
  - currentTurn: int
  - threadMap: Map<String, CommunicationThread>

  + SharedData()
}

class CommunicationThread {
  - clientSocket: Socket
  - port: int
  - sharedData: SharedData

  + CommunicationThread(clientSocket: Socket, port: int, sharedData: SharedData)
  + run(): void
}

class TCPServer {
  - sharedData: SharedData

  + main(args: String[]): void
  + startCommunicationThread(threadName: String, port: int): void
}

class TCPClient {
  - pezzo: char
  - colore: Color
  - colore2: Color
  - serverPort: int
  - gui: GUI

  + TCPClient(gui: GUI)
  + comunicazioneServer(colonna: int): void
}

class GUI {
  - columnButtons: JButton[]
  - matrixLabels: JLabel[][]
  - tcpClient: TCPClient

  + GUI(tcpClient: TCPClient)
  + GUI()
  + disegnaMatrice(): void
  + ridisegnaMatrice(matrix: char[][]): void
  + disegnaCerchio(label: JLabel, colore: Color): void
  + setTCPClient(tcpClient: TCPClient): void
}

GUI --> TCPClient
TCPClient --> GUI
TCPClient --> SwingWorker
TCPServer --> CommunicationThread
CommunicationThread --> Socket
CommunicationThread --> SharedData
CommunicationThread --> IOException

class TCPClient2 {
  - pezzo: char
  - colore: Color
  - colore2: Color
  - serverPort: int
  - gui: GUI

  + TCPClient2(gui: GUI)
  + comunicazioneServer(colonna: int): void
}

TCPClient2 --> GUI
TCPClient2 --> SwingWorker

@enduml
